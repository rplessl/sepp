.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "..::..::sbin::SEPP::OSDetector 3"
.TH ..::..::sbin::SEPP::OSDetector 3 "2007-11-11" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
OSDetector.pm \- SEPP startup module for detecting the OS or the valid EPREFIX directory
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   my $os = SEPP::OSDetector::get_existing_execdir( $PackDir [, %DIR ] ));
.Ve
.PP
or
.PP
.Vb 1
\&   my @compatibles = SEPP::OSDetector::get_compatible_os( [ %DIR ] );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides two functions for compiling new \s-1SEPP\s0 packages 
and creating smart \s-1OS\s0 detection SEPP/start.pl wrappers. 
.ie n .IP "\fBSEPP::OSDetector::get_existing_execdir( \fB$PackDir\fB [ , \f(BI%DIR\fB ])\fR" 10
.el .IP "\fBSEPP::OSDetector::get_existing_execdir( \f(CB$PackDir\fB [ , \f(CB%DIR\fB ])\fR" 10
.IX Item "SEPP::OSDetector::get_existing_execdir( $PackDir [ , %DIR ])"
[ The paramter \f(CW%DIR\fR is optional and contains the path information
.Sp
.Vb 3
\&  %DIR = ( 'sepp' => '/usr/sepp', 
\&           'pack' => '/usr/pack' ); 
\&]
.Ve
.Sp
Returns the best match for \fI$EPREFIX\fR for the running \s-1OS\s0. That
means if there is a \s-1SEPP\s0 Package with the following directory
structure (e.g. samba\-3.0.25\-mo):
.Sp
`\-\-SEPP
`\-\-amd64\-debian\-linux3.1
`\-\-i686\-debian\-linux3.1
`\-\-include
`\-\-man
`\-\-share
`\-\-.swat
`\-\-template
`\-\-var
.Sp
the result of this function will be
.Sp
.Vb 2
\& amd64\-debian\-linux3.1  on a amd64 debian system (64bit)
\& i686\-debian\-linux3.1   on a i686 debian system  (32bit)
.Ve
.ie n .IP "\fBSEPP::OSDetector::get_compatible_os( [ \fB%DIR\fB ] )\fR" 10
.el .IP "\fBSEPP::OSDetector::get_compatible_os( [ \f(CB%DIR\fB ] )\fR" 10
.IX Item "SEPP::OSDetector::get_compatible_os( [ %DIR ] )"
[ The paramter \f(CW%DIR\fR is optional and contains the path information
.Sp
.Vb 3
\&  %DIR = ( 'sepp' => '/usr/sepp', 
\&           'pack' => '/usr/pack' );  
\&]
.Ve
.Sp
Returns a perl array with \s-1OS\s0 compatible \fI$EPREFIX\fR. 
E.g. on a amd64 system running Ubuntu 6.10 the result will be
.Sp
.Vb 6
\&  amd64\-linux\-ubuntu6.10
\&  ia32\-linux\-ubuntu6.10
\&  amd64\-linux\-ubuntu6.06
\&  ia32\-linux\-ubuntu6.06
\&  amd64\-debian\-linux3.1
\&  i686\-debian\-linux3.1
.Ve
.Sp
that means, all this compiled versions are runnable on the
Ubuntu 6.10 system (i.e. \s-1GLIBC\s0 version is not newer). The 
first entry in the array is the best match, the last the
worst.
.Sh "configuration file"
.IX Subsection "configuration file"
SEPP::OSDetector.pm is using the configuration file \fIOSDetector.conf\fR
which contains all valid CPUs, OSes and distribution. The configuration
file format is Config::Grammar. 
.PP
The \*(L"inter \s-1OS\s0\*(R" compatibility is also kept in this file.
.PP
Structure of configuration file:
.PP
.Vb 4
\&   *** MY\-OS ***
\&   + CPU
\&   ++ cpu\-type
\&   +++ cpu\-sub\-type
.Ve
.PP
.Vb 3
\&   + Distribution
\&   ++ distribution\-type
\&   +++ distribution\-sub\-type
.Ve
.PP
.Vb 2
\&   *** MY\-OTHER\-OS ***
\&   ...
.Ve
.PP
.Vb 3
\&   *** Compatibility ***
\&   + CPU\-OS\-DISTRIBUTION_1
\&   + CPU\-OS\-DISTRIBUTION_2
.Ve
.PP
The name of the head sections (*** MY-OS ***) has to match with 
the result of $^O.
.PP
Each head section has two subsections: \s-1CPU\s0 and Distributions with 
their subsub\- and subsubsubsections discribing the exact \s-1CPUTYPE\s0 
or \s-1OS\s0 (relation).
.PP
For each cpu(\-sub)\-type and distribution(\-sub)\-type a blob of
executable code should be inserted which returns 'true' if the
query matches otherwise 'false'.
.PP
The Compatibility list is an sorted list of compatible 
CPU-OS-Distributions triplets to the heading triplet. 
.PP
Example of OSDetector.conf
.PP
.Vb 8
\&   *** solaris ***
\&   + CPU
\&   ++ sparc
\&   {
\&      my $cpu = `uname \-p`;
\&      if ($cpu =~ /sparc/) { return 'true'; } else { return 'false'; }
\&   }
\&   ...
.Ve
.PP
.Vb 44
\&   *** linux ***
\&   + CPU
\&   ++ ia32
\&   {
\&       my $cpu = `/bin/uname \-m`;
\&       if ($cpu =~ /(i686|x86_64)/) { return 'true'; } else { return 'false'; }
\&   }
\&   +++ amd64
\&   {
\&       my $processor_type = `/bin/uname \-m`;
\&       if ($processor_type =~ /x86_64/) { return 'true'; } else { return 'false'; } 
\&   }
\&   + Distribution
\&   ++ debian
\&   {
\&       if ( \-e '/etc/debian_version' && ! \-e '/etc/lsb\-release' ) {
\&           return 'true';  } else { return 'false'; }
\&   }
\&   +++ debian4.0
\&   {
\&      if ( \-e '/etc/debian_version'&& ! \-e '/etc/lsb\-release' ) {
\&         my $debian_version = `cat /etc/debian_version`;
\&         if ($debian_version =~ /4.0/) { return 'true'; } else { return 'false'; }
\&      } else { return 'false'; }
\&   }
\&   ++ ubuntu
\&   {
\&      if ( \-e '/etc/lsb\-release' ) {
\&         my $lsbrelease =  `/bin/cat /etc/lsb\-release`;
\&         if ($lsbrelease =~ /Ubuntu/) { return 'true'; } else { return 'false'; }
\&      } else { return 'false'; }
\&   }
\&   +++ ubuntu6.06
\&   {
\&      if ( \-e '/etc/lsb\-release' ) {
\&         my $lsbrelease = `/bin/cat /etc/lsb\-release`;
\&         if ($lsbrelease =~ /Ubuntu/) {
\&            if ($lsbrelease =~ /6.06/) {
\&              return 'true';
\&            } else { return 'false'; }
\&         } else { return 'false'; }
\&      } else { return 'false'; }
\&   }
\&   ...
.Ve
.PP
.Vb 9
\&   *** Compatibility ***
\&   + amd64\-linux\-ubuntu7.04
\&   ia32\-linux\-ubuntu7.04
\&   amd64\-linux\-ubuntu6.10
\&   ia32\-linux\-ubuntu6.10
\&   amd64\-linux\-ubuntu6.06
\&   amd64\-debian\-linux3.1
\&   ia32\-linux\-ubuntu6.06
\&   i686\-debian\-linux3.1
.Ve
.PP
.Vb 5
\&   + ia32\-linux\-ubuntu7.04
\&   ia32\-linux\-ubuntu6.10
\&   ia32\-linux\-ubuntu6.06
\&   i686\-debian\-linux3.1
\&   ...
.Ve
.IP "\(bu" 10
.SH "BUGS"
.IX Header "BUGS"
No knowns till now ... :\-)
.SH "AUTHOR"
.IX Header "AUTHOR"
Roman Plessl <roman.plessl@oetiker.ch>
