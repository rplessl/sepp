SEPP - Software Deployment System
---------------------------------
Installation instructions
=========================
by Tobias Oetiker <tobi@oetiker.ch> (2006-02-08.1)
by Roman Plessl <roman.plessl@oetiker.ch> (2008-07-28)

* create a SEPP install directory and give it to your local SEPP user. 

  All SEPP applications will be installed as that user. Note that you 
  MUST use the directory /usr/sepp and /usr/pack as long as you want to 
  share SEPP packages with other people. /usr/sepp and /usr/pack are
  the default pathes.

  Often software relies on absolute path-names.

  # mkdir /usr/sepp; cd /usr/sepp
  # adduser sepp
  # chown sepp /usr/sepp 
  # su - sepp

* unpack the SEPP base installation into the /usr/sepp directory. 
  (the % character shows that the following things should be done
  as the SEPP user)

  % cd /usr/sepp
  % wget http://oss.oetiker.ch/op-sepp/pub/sepp-1.5.3.tar.bz2 -O - | bunzip2 | tar xf -

* Add the symlinks to perl and rsync by just add symbolic links:

  % cd /usr/sepp
  % ln -s /usr/bin/rsync sbin/rsync
  % ln -s /usr/bin/perl sbin/perl

* the next step is to setup your package repository. If you have only one
  SEPP partition, then this is simple:

  # mkdir /usr/pack
  # chown sepp /usr/pack

  If you are planning on a larger deployment where each SEPP package could
  be on a different partition or even a different host, then you have to
  setup the automounter to dynamically build /usr/pack based on the content
  of /usr/sepp/conf/autosepp_master this is quite system dependent. On
  Solaris you do
  
  # echo +/usr/sepp/conf/autosepp_master >>/etc/auto_master
  # automount -v

  On other systems you may want to use a program mount or some other means
  since SEPP assumes that a new /usr/pack directory will become visible as
  soon as it is added to the automount map. Check out conf/sepp.pl for
  program mounts. It works on Solaris and Linux.

* If you went down the automount path, you have to create a local package
  store:

  # mkdir /usr/pack-store-a
  # chown sepp /usr/pack-store-a

* SEPP has to know some things about your system so that it can work
  properly. These settings are all stored in /usr/sepp/conf/sepp.conf

  % cd /usr/sepp/conf  

  % cp sepp.conf-dist sepp.conf
  
  or if you work on a simple standalone system (no automount)
 
  % cp sepp.conf-standalone sepp.conf

  Now edit the file with an editor of your choice and make any changes you
  see fit.

  % vi sepp.conf

  A second config file is read at run-time by all sepp packages, providing
  them with some basic information about your system.

  % cp sepprc.system-dist sepprc.system
  % vi sepprc.system

* Make sure your  SEPP.packlists exists where sepp.conf says it should. And touch
  yourself an autosepp_indirect file into existence.

  % touch /usr/sepp/SEPP.packlist
  % touch /usr/sepp/conf/autosepp_indirect

* Create a init script running at machine startup to create the 
  /tmp/SEPP.OS.DETECTOR file owned by root or the SEPP user. 

  This init script should be done for security reasons!

  % vi sepp_osdetector.init.sh
  % cp sepp_osdetector.init.sh /etc/init.d/sepp_osdetector.sh

  add to wished runlevels like

  % ln -s ../init.d/sepp_osdetector.sh /etc/rc2.d/S50sepp_osdetector.sh

  change owner and permissions of sepp_osdetector.sh

  % chown root:root /etc/init.d/sepp_osdetector.sh
  % chmod 644       /etc/init.d/sepp_osdetector.sh

* You can now either start building your own sepp packages following the
  instructions in html/seppdoc.pdf or you can use sepp-get to fetch some
  packages of our public package server. 

  sepp-get is available from http://oss.oetiker.ch/optools.

If you are lucky to work in an environment where other people are using SEPP
as well, you might want to talk to them about connecting your SEPP setup
with theirs using their packlist (this requires an automount setup).

 
