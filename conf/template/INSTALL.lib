### helper library for building software packages
### $Id: INSTALL.lib 243 2006-05-09 06:45:07Z oetiker $
###
### * this is part of SEPP
### * it looks like bourn shell but it is BASH !
###

## die whenever a program returns non 0 outside a if/while/until/repeat or
## other decision structure
set -o errexit
# to disable use  set +o errexit

# don't try to remember where things are
set +o hashall

## do not tollerate unset variables
set -u

SEPPDIR=`dirname $0`
# If SEPPDIR has _NO_ leading / (--> Relative Path)
if [ "$SEPPDIR" = "${SEPPDIR#/}" ] ; then
  SEPPDIR=`pwd`/$SEPPDIR
fi

OS=`uname`

PACK=${PROD}-${VERSION}-${PACKAGER}

if [ x$PROD = x ]; then
 echo PROD not defined
 exit 1
fi

if [ x$VERSION = x ]; then 
 echo VERSION not defined 
 exit 1
fi

if [ x$PACKAGER = x ]; then
 echo PACKAGER not defined 
 exit 1
fi


if [ $OS = SunOS ]; then
        ARCH=`seppadm environment $PACK | grep ARCH | cut -f2 -d'='`
        R="-R"
        XINC=/usr/openwin/include
        XLIB=/usr/openwin/lib
        GNUMAKE=gmake
        # solaris-ld doesn't support this:
        LDFLAG_AS_NEEDED=""
        export GNUMAKE
elif [ $OS = Darwin ]; then
        ARCH=`seppadm environment $PACK | grep ARCH | cut -f2 -d'='`
        # Mac doesn't know -R --> use another -L instead
        R="-L"
        XINC=/usr/X11R6/include
        XLIB=/usr/X11R6/lib
        LDFLAG_AS_NEEDED=""
        function gcp () {
             cp "$@"
        }
        function gpatch () {
             patch "$@"
        }
        function gtar () {
             tar "$@"
        }
        function gmake () {
             make "$@"
        }
else
        ARCH=`seppadm environment $PACK | grep ARCH | cut -f2 -d'='`
        R="-Wl,-rpath -Wl,"
        XINC=/usr/include
        XLIB=/usr/lib
        if [ -f /etc/debian_version ]; then
            DEBIAN=`cat /etc/debian_version`
            if [ $DEBIAN = "3.1" ]; then
               XINC=/usr/X11R6/include
               XLIB=/usr/X11R6/lib
            fi
        fi
        LDFLAG_AS_NEEDED="-Wl,--as-needed"

        function gcp () {
             cp "$@"
        }
        function gpatch () {
             patch "$@"
        }
        function gtar () {
             tar "$@"
        }
        function gmake () {
             make "$@"
        }
fi

PREFIX=${PREFIX:-`seppadm environment $PACK  | grep -m1 PREFIX | cut -f2 -d'='`}
EPREFIX=${EPREFIX:-`seppadm environment $PACK | grep EPREFIX | cut -f2 -d'='`} 
VPREFIX=${VPREFIX:-`seppadm environment $PACK | grep VPREFIX | cut -f2 -d'='`}
WORKDIR=${WORKDIR:-`seppadm environment $PACK | grep WORKDIR | cut -f2 -d'='`}

PREFIX=${PREFIX:-/usr/pack/$PACK}
EPREFIX=${EPREFIX:-$PREFIX/$ARCH}
VPREFIX=${VPREFIX:-/usr/sepp/var/$PACK}
WORKDIR=${WORKDIR:-/scratch/build/$PACK}


# make sure we find anything we preinstall
export PATH=$EPREFIX/bin:$PATH
# tell pkg-config where to look for *.pc files
export PKG_CONFIG_PATH=$EPREFIX/lib/pkgconfig:/usr/lib/pkgconfig
# just to make sure those who are not compiled propperly still work
export LD_LIBRARY_PATH=$EPREFIX/lib

[ -d $WORKDIR ] || mkdir -p $WORKDIR

function debpatch () {
 cd $WORKDIR
  echo "**** doing $2 ****"
  [ -f $2 ] || wget   --tries=0 --random-wait --passive-ftp $1/$2
  gunzip -c $2 > patch-deb
  rm $2
}

function prepare () {
 cd $WORKDIR
 if [ ! -f $2.ok ]
 then 
   echo "**** doing $2 ****"
   [ -f $2 ] || wget   --tries=0 --random-wait --passive-ftp $1/$2
   unset SRCDIR
   [ -f $2.srcdir ] && SRCDIR=`cat $2.srcdir`
   case $2 in
     *.tar.bz2)
         SRCDIR=${SRCDIR:-$WORKDIR/`basename $2 .tar.bz2`}
         [ -d $SRCDIR ] || bunzip2 -c $2 | gtar xf -;;
     *.tar.gz)
         SRCDIR=${SRCDIR:-$WORKDIR/`basename $2 .tar.gz`}
         [ -d $SRCDIR ] || gtar zxf $2;;
     *.tgz)
         SRCDIR=${SRCDIR:-$WORKDIR/`basename $2 .tgz`}
         [ -d $SRCDIR ] || gtar zxf $2;;
     *.tar.Z)
         SRCDIR=${SRCDIR:-$WORKDIR/`basename $2 .tar.Z`}
         [ -d $SRCDIR ] || gtar zxf $2;;
     *.tar)
         SRCDIR=${SRCDIR:-$WORKDIR/`basename $2 .tar`}
         [ -d $SRCDIR ] || tar xf $2;;
     *.zip)
         SRCDIR=${SRCDIR:-$WORKDIR/`basename $2 .zip`}
	 [ -d $SRCDIR ] || unzip -a $2 || exit 1;;

     *)  echo "Don't know how to unpack $2"
   esac
   if [ ! -d $SRCDIR ]; then
   	SRCDIR=`ls -F1tc $WORKDIR | grep / | head -1 | sed 's/\/$//'`
	echo $SRCDIR >$2.srcdir
   fi
   cd $SRCDIR
   if [ -f $WORKDIR/patch ]; then
	gpatch -p0 -l <$WORKDIR/patch 
	rm $WORKDIR/patch
   fi
   if [ -f $WORKDIR/patch-deb ]; then
   	gpatch -p1 -l <$WORKDIR/patch-deb 
	if [ -d debian/patches ]; then
		PATCHES=`cd debian/patches && ls`
		for p in $PATCHES; do
			[ "$p" = "00list" ] && continue
			[ -e debian/patched/$p ] && continue
			echo "### applying $p:"
			gpatch -p1 <$p
		done
	fi
	rm $WORKDIR/patch-deb
   fi
 else
   echo "**** skipping $2 ****"
   [ -f  $WORKDIR/patch ] && rm $WORKDIR/patch
   cd $WORKDIR
   return 1
 fi
}
# default
KEEP=no

function remove () {
    DIR=`pwd`    
    case $DIR in
        $WORKDIR/*)
                cd ..
                if [ x$KEEP = xyes ]; then
                        echo Keeping $DIR
                else
                        rm -rf $DIR
                fi
                ;;
        *)
                echo OOPS I wont remove $DIR because it is not in $1
                exit 1
                ;;
    esac
}

function simplebuild (){    
 if prepare $1 $2
 then
   shift
   simpleprogram=$1;shift   
   if [ ! -f configure ]; then
        confdir=`ls */configure */*/configure| head -1`
        upone=".."
        if [ -f "$confdir" ]; then
                cd `dirname $confdir`
        else
           confdir=`ls */*/configure | head -1`
           upone="../.."
           if [ -f "$confdir" ]; then
               cd `dirname $confdir`  
           else
                echo "No configure script found in $simpleprogram"
                exit 1
           fi
        fi
   else
      upone="."
   fi
   # make sure our libraries come first because only this guarantees propper operation of xrender
   answer=N
   if test -f config.log -a -f Makefile ; then
     printf "Reconfigure? (y/N) "
     read answer
   fi
   if test !  -f config.log  -o ! -f Makefile -o   "$answer" = y  -o  "$answer" = Y ; then
     rm -f config.cache 
     ./configure --exec-prefix=$EPREFIX --prefix=$PREFIX "$@"    2>&1 | tee -a $upone/../${simpleprogram}.output
     [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
     if [ -f $WORKDIR/patch.post ]; then
	gpatch -p0 -l <$WORKDIR/patch.post 
     fi
   fi
   gmake                                                       2>&1 | tee -a $upone/../${simpleprogram}.output
   [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
   gmake install                                               2>&1 | tee -a $upone/../${simpleprogram}.output
   [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
   cd $upone                                                   
   remove 
   touch ${simpleprogram}.ok                                   
 fi
 [ -f $WORKDIR/patch.post ] && rm $WORKDIR/patch.post
 cd $WORKDIR
}

function gbuild (){
 simpleprogram=`grep ^${1}- list | head -1 | awk '{print $1}'` 
 shift
 if prepare $GNOMEMIRROR ${simpleprogram}
   then
   if [ ! -f configure ]; then
        confdir=`ls */configure | head -1`
        upone=".."
        if [ -f "$confdir" ]; then
                cd `dirname $confdir`
        else
                echo "No configure script found in $simpleprogram"
                exit 1
        fi
   else
      upone="."
   fi
   rm -f config.cache
   ./configure --exec-prefix=$EPREFIX --prefix=$PREFIX $GNOMECFG "$@"    2>&1 | tee -a $upone/../${simpleprogram}.output
   [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}
   if [ -f $WORKDIR/patch.post ]; then
	gpatch -p0 -l <$WORKDIR/patch.post 
   fi
   gmake                                                       2>&1 | tee -a $upone/../${simpleprogram}.output
   [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}
   gmake install                                               2>&1 | tee -a $upone/../${simpleprogram}.output
   [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
   cd $upone                                                   
   remove 
   touch ${simpleprogram}.ok                                   
 fi
 [ -f $WORKDIR/patch.post ] && rm $WORKDIR/patch.post
 cd $WORKDIR
}
 	

function kdemake (){    
 package=${1}.tar.bz2; shift
 if prepare $KDEMIRROR ${package}
 then
   # make sure our libraries come first because only this guarantees propper operation of xrender
   answer=N
   if test -f config.log -a -f Makefile ; then
     printf "Reconfigure ${package} ? (y/N) "
     read answer
   fi
   if test !  -f config.log  -o ! -f Makefile -o   "$answer" = y  -o  "$answer" = Y ; then
     perl -i~ -p -e 's/^all_libraries=".X_LDFLAGS"/all_libraries="\$LDFLAGS_FRONT \$X_LDFLAGS"/' configure
     LDFLAGS=-L$EPREFIX/lib CPPFLAGS= ./configure --exec-prefix=$EPREFIX --prefix=$PREFIX $KDECFG "$@"  2>&1 | tee -a ../${package}.output
     [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
     if [ -f $WORKDIR/patch.post ]; then
	gpatch -p0 -l <$WORKDIR/patch.post 
     fi
   fi
   gmake  SHELL=bash                    2>&1 | tee -a ../${package}.output
   [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
   gmake install SHELL=bash             2>&1 | tee -a ../${package}.output
   [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
   remove 
   touch ${package}.ok
 fi
 [ -f $WORKDIR/patch.post ] && rm $WORKDIR/patch.post
 cd $WORKDIR
}


function perlmodule (){
 path=$1;shift
 if [ "${path##*/}" = "${path}" ]; then
	wget --quiet --timestamping ftp://sunsite.cnlab-switch.ch/mirror/CPAN/modules/02packages.details.txt.gz 
	if [ 02packages.details.txt.gz -nt 02packages.details.txt ]; then
		gunzip -c 02packages.details.txt.gz > 02packages.details.txt
	fi
	temp=$(grep "^$path " 02packages.details.txt|head -1)
	temp="${temp##* }"
	pack="${temp##*/}"
	path=http://cpan.mirror.solnet.ch/authors/id/"${temp%/*}"
 else
        pack=${1:-""};shift
 fi
 if prepare "$path" "$pack"
 then
   simpleprogram=$pack
   rm -f config.cache 
   PERL=${PERL:-/usr/bin/perl}
   PERL_VERSION=`$PERL -e 'printf "%vd\n", $^V;'`
   export PERL5LIB=$PREFIX/lib/perl:${PERL5LIB:-}
   if [ -f Build.PL ]; then
      $PERL -I$PREFIX/lib/perl Build.PL \
        --config installvendorarch=lib/perl/$PERL_VERSION/`$PERL -MConfig -e 'print $Config{archname}'` \
        --config installvendorlib=lib/perl/$PERL_VERSION \
        --config installvendorbin=bin \
        --config installvendorman3dir=man/man3 \
        --config installvendorman1dir=man/man1 \
        installdirs=vendor \
       destdir=$PREFIX "$@" 2>&1 | tee -a ../${simpleprogram}.output
        [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]} 
       ./Build 2>&1 | tee -a ../${simpleprogram}.output
         [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]} 
        ./Build install 2>&1 | tee -a ../${simpleprogram}.output 
         [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]} 
  else        
     $PERL -I/$PREFIX/lib/perl Makefile.PL \
        LIB=$PREFIX/lib/perl/$PERL_VERSION PREFIX=$PREFIX "$@" 2>&1 | tee -a ../${simpleprogram}.output
     [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
      gmake   2>&1 | tee -a ../${simpleprogram}.output
     [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
     gmake install 2>&1 | tee -a ../${simpleprogram}.output
     [ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}     
   fi
   remove 
   touch ${simpleprogram}.ok
 fi
 cd $WORKDIR
}

function kde314_3rdparty () {
  KDE=kde-3.1.4-to
  KPFX=/usr/pack/$KDE

  export QTDIR=${KPFX}/${ARCH}
  export KDEDIRS=${PREFIX}:${KPFX}/${ARCH}
  export KDEDIR=${KPFX}/${ARCH}
  export PATH=/usr/pack/gcc-3.2.3-mo/$ARCH/bin:${KPFX}/${ARCH}/bin:$PATH
  simplebuild $1 $2 --disable-debug --enable-final --with-pic \
        --with-extra-libs=${EPREFIX}/lib:${KPFX}/${ARCH}/lib:$XLIB \
        --with-extra-includes=${PREFIX}/include:${KPFX}/include:$XINC \
        --with-qt-libraries=${KPFX}/${ARCH}/lib \
        --with-qt-includes=${KPFX}/include $3 $4 $5 $6 $7 $8 $9
  cat <<START >$PREFIX/SEPP/start.pl
my %os = ( 'solaris' => 'sun4u-sun-solaris2.9',
           'linux' => 'i686-debian-linux3.0' );
PreENV 'PATH', "$KPFX/\$os{\$^O}/bin";
SetENV 'KDEDIRS', "\$PackDir/$os{$^O}:\$PackDir:$KPFX/\$os{\$^O}";
AppExec "\$PackDir/\$os{\$^O}/bin";
START
  chmod 755 $PREFIX/SEPP/start.pl
}

# vim: ft=sh
